/* Write your T-SQL query statement below */

/*
175. Combine Two Tables
Runtime: 848 ms*/

Select p.firstName, p.lastName, a.city, a.state
From Person p left Join Address a On p.personId = a.personId


/*
2339. All the Macthes of the laegue
Table: Teams

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| team_name   | varchar |
+-------------+---------+
team_name is the column with unique values of this table.
Each row of this table shows the name of a team.
 

Write a solution to report all the possible matches of the league. Note that every two teams play two matches with each other, with one team being the home_team once and the other time being the away_team.

Return the result table in any order.
The result format is in the following example. 

Example 1:

Input: 
Teams table:
+-------------+
| team_name   |
+-------------+
| Leetcode FC |
| Ahly SC     |
| Real Madrid |
+-------------+
Output: 
+-------------+-------------+
| home_team   | away_team   |
+-------------+-------------+
| Real Madrid | Leetcode FC |
| Real Madrid | Ahly SC     |
| Leetcode FC | Real Madrid |
| Leetcode FC | Ahly SC     |
| Ahly SC     | Real Madrid |
| Ahly SC     | Leetcode FC |
+-------------+-------------+
Explanation: All the matches of the league are shown in the table.

Runtime: 602 ms

*/
Select t1.team_name as home_team, t2.team_name as away_team 
From Teams t1, Teams t2
Where t1.team_name != t2.team_name

/*1068. Product Sales Analysis I*/
Select p.product_name, s.year, s.price
From Sales s Inner Join Product p On s.product_id = p.product_id

/*1581. Customer Who Visited but Did Not Make Any Transactions*/
/* Write your T-SQL query statement below */
Select Sub.customer_id,
COUNT(*) as count_no_trans
From
(
Select v.visit_id ,v.customer_id, t.transaction_id as count_no_trans  
From Visits v left Join Transactions t On v.visit_id = t.visit_id
Where t.visit_id is null
) as Sub
Group by Sub.customer_id
 
 /*197. Rising Temperature*/
 /* Write your T-SQL query statement below */
Select w2.id
 From Weather w1 Inner Join Weather w2 On DATEDIFF(day, w1.recordDate, w2.recordDate) =1
 and w2.temperature > w1.temperature

 /*
 SELECT
   w1.id
FROM Weather as w1
    inner join Weather as w2 on w1.recordDate=DATEADD(DAY, 1, w2.recordDate)
WHERE
    w1.temperature > w2.temperature
 */

 /* 1661. Average Time of Process per Machine */
Select a1.machine_id, ROUND(AVG(a2.timestamp - a1.timestamp),3) processing_time
From Activity a1
Join Activity a2
On a1.process_id = a2.process_id
And a1.machine_id = a2.machine_id
And a1.timestamp < a2.timestamp
Group by a1.machine_id

/ *577. Employee Bonus */
Select c.name, c.bonus
From (
Select e.name, b.bonus
From Employee e left Join Bonus b On e.empId = b.empId 

) c 
Where c.bonus < 1000 or c.bonus is null

/* 1280. Students and Examinations  */
Select *,
(Select count(student_id) 
From Examinations e 
where e.student_id = s.student_id 
and e.subject_name = sn.subject_name) as attended_exams
From Students s
Cross Join Subjects sn
Order by student_id, subject_name


/* 570. Managers with at Least 5 Direct Reports  */
Select t1.name
From Employee t1 
Inner Join Employee t2
On t1.id = t2.managerId
Group by t2.managerId, t1.name
Having count(t2.managerId) >= 5

/* 1934. Confirmation Rate */
Select s.user_id, Round(ISNULL([rate], 0),2) as confirmation_rate 
 From
  (Select user_id,
  (count(Case When action = 'confirmed' Then 1 Else null End)/
  Cast(Count(user_id) as decimal(10,2))) as rate
  From Confirmations Group by user_id) as c
  right Join Signups s On s.user_id = c.user_Id


  /* 620. Not Boring Movies */
   Select id, movie, description, rating
  From Cinema 
  Where id % 2 = 1 and description != 'boring'
  Order by rating desc

  /* 1251. Average Selling Price  */
Select  p.product_id, 
ROUND(ISNULL((SUM(u.units * p.price) + 0.00) / (SUM(u.units) + 0.00), 0), 2) average_price
From Prices p
LEFT Join UnitsSold u On p.product_id = u.product_id
and p.start_date <= u.purchase_date and p.end_date >= u.purchase_date
Group by  p.product_id

/* 1075. Project Employees I */
Select p.project_id,
ROUND(ISNULL((SUM(e.experience_years) + 0.00) /(COUNT(p.project_id) + 0.00),0 ), 2) as average_years 
From Project p 
Join Employee e On p.employee_id = e.employee_id
Group by p.project_id

/* 1633. Percentage of Users Attended a Contest   */
Select r.contest_id,
ROUND(COUNT(u.user_id)*100*1.0 /(Select  COUNT(*) From Users),2) as percentage
From Users u 
Inner Join Register r 
On u.user_id = r.user_id 
Group by r.contest_id
Order by percentage desc, r.contest_id asc


/*  1174. Immediate Food Delivery II */
/* Write your T-SQL query statement below */
Select 
ROUND(AVG(Case When 
  (order_date = customer_pref_delivery_date) Then 100.0 Else 0 End),2) as immediate_percentage
From (Select *, RANK() OVER (PARTITION BY customer_id Order by order_date) as rank
 From Delivery ) as data
 Where rank =1

 /*  550. Game Play Analysis IV */

 With MinDate as (
  Select player_id, Min(event_date) minDt From Activity Group by player_id
)

Select ROUND(COUNT(a.player_id)*1.0/(Select COUNT(DISTINCT player_id) From Activity),2) fraction
From Activity a, MinDate md
Where DATEDIFF(day, md.minDt, event_date) = 1 and a.player_id = md.player_id

/* 2356. Number of Unique Subjects Taught by Each Teacher    */
Select  t.teacher_id, 
Count(Distinct t.subject_id) cnt
From Teacher t
Group by t.teacher_id

/* 1070. Product Sales Analysis III  */
With s2 as
(
  Select product_id, Min(year) as year From Sales Group by product_id
)
Select s.product_id, s.year as first_year, s.quantity, s.price
From Sales s
Inner Join s2 On s.product_id = s2.product_id and s.year = s2.year

/* 596. Classes More Than 5 Students */
 Select class From Courses
 Group by class
 Having Count(class)>=5